#!/bin/bash
# commits_this_week
# Print out the commits to Perforce made by a particular user over the last week
# Author: <eindiran@promptu.com>
# Date: 2017-03-16

DEBUG=false # Set this to true while debugging, false otherwise.
LONG=false
REPORTS_DIR=$HOME/weekly_p4_report

usage() {
    printf "\ncommits_this_week"
    printf "\n-------------------------------------------------------------------------------"
    printf "\nA tool to print out the commits to"
    printf "\np4 made by a particular user over the last week."
    printf "\nUsage:"
    printf "\n-------------------------------------------------------------------------------"
    printf "\nLong Flags:\tcommits_this_week [--help] --user <U> [--file <F>] [--debug] [--long] [--report]"
    printf "\nShort Flags:\tcommits_this_week [-h] -u <U> [-f <F>] [-db] [-l] [-r]\n\n"
    exit 0
}

date_to_int() {
    # shellcheck disable=SC2001
    # Get shellcheck to not suggest ${variable//search/replace} format instead of sed
    echo "$1" | sed -e 's/-//g'
}

print_summary_stdout() {
    if [[ $DEBUG = true ]] ; then
        printf "\nDebug statement for fn print_summary_to_stdout:\n\t (user) = %s\n" "$1"
        printf "\t (num_commits) = %s\n" "$2"
        :
    fi
    user="$1"
    commit_num="$2"
    p4 changes -u "$user" | head -n "$commit_num"
    # $1 = <USER>
    # $2 = num_commits
}

print_full_stdout() {
    if [[ $DEBUG = true ]] ; then
        printf "\nDebug statement for fn print_full_stdout:\n\t (user) = %s\n" "$1"
        printf "\t (num_commits) = %s\n" "$2"
    fi
    p4 changes -u "$1" | head -n "$2" | awk '{print $2}' | xargs p4 describe -s -
    # $1 = <USER>
    # $2 = num_commits
    # Note that the call to 'p4 describe' uses the '-s' flag to suppress the diff of each file
    # which would usually be wayyyy to much information to take in.
}

print_summary_to_file() {
    if [[ $DEBUG = true ]] ; then
        printf "\nDebug statement for fn print_summary_to_file:\n\t (user) = %s\n" "$1"
        printf "\t (num_commits) = %s\n" "$2"
        printf "\t (output_filename) = %s\n\n" "$3"
    fi
    p4 changes -u "$1" | head -n "$2" > "$3"
    # $1 = <USER>
    # $2 = num_commits
    # $3 = output filename
}

print_full_to_file() {
    if [[ $DEBUG = true ]] ; then
        printf "\nDebug statement for fn print_full_to_file:\n\t (user) = %s\n" "$1"
        printf "\t (num_commits) = %s\n" "$2"
        printf "\t (output_filename) = %s\n\n" "$3"
    fi
    p4 changes -u "$1" | head -n "$2" | awk '{print $2}' | xargs p4 describe -s - > "$3"
    # $1 = <USER>
    # $2 = num_commits
    # $3 = output filename
}

generate_weekly_report() {
    if [[ -z "$1" ]] ; then
        echo "No user recieved in fn generate_weekly_report. Cannot continue."
        exit 1
    fi
    if [[ "$DEBUG" = true ]] ; then
            printf "\nDebug statement for fn generate_weekly_report:\n\t (user) = %s\n" "$1"
            printf "\t (num_commits) = %s\n" "$2"
    fi
    p4 changes -u "$1" | head -n "$2" | awk '{print $2}' | xargs p4 describe -s - > "$REPORTS_DIR"/tmp.report.p4."$1"."$(date -I)"
    sed -e 's/^Change/=========================================================================\nChange/g' "$REPORTS_DIR"/tmp.report.p4."$1"."$(date -I)" > "$REPORTS_DIR"/report.p4."$1"."$(date -I)"
    rm -f "$REPORTS_DIR"/tmp.report.p4."$1"."$(date -I)"
}

get_commit_num() {
    # $1 = <USER>
    commits=0
    for i in $(p4 changes -u "$1" | awk '{print $4}' | sed -e 's/\//-/g'); do
        comp_i="$(date_to_int "$i")"
        comp_week_ago="$(date_to_int "$(date --date="7 days ago" -I)")"
        if [ "$comp_i" -ge "$comp_week_ago" ] ; then
            commits=$(( commits + 1 ))
        fi
    done
    printf "%d\n" "$commits"
}

main() {
    # $1 = <USER>
    # $2 = <FILENAME> [optional]
    user="$1"
    commits="$(get_commit_num "$user")"
    if [[ -z "$2" ]] ; then
        if [[ "$LONG" = true ]] ; then
            print_full_stdout "$user" "$commits"
        else
            echo # Add newlines before and after printing to stdout
            # for purely aesthetic reasons
            print_summary_stdout "$user" "$commits"
            echo
        fi
    else
        filename=$2
        if [[ "$LONG" = true ]] ; then
            print_full_to_file "$user" "$commits" "$filename"
        else
            print_summary_to_file "$user" "$commits" "$filename"
        fi
    fi
    exit 0
}

eindiran_orig() {
    # Original version of this program which worked only for myself.
    commits=0
    for i in $(p4 changes -u eindiran | awk '{print $4}' | sed -e 's/\//-/g'); do
        comp_i="$(date_to_int "$i")"
        comp_week_ago="$(date_to_int "$(date --date="7 days ago" -I)")"
        if [ "$comp_i" -ge "$comp_week_ago" ] ; then
            commits=$(( commits + 1 ))
        fi
    done
    p4 changes -u eindiran | head -n $commits
}

#####################################
## EXECUTION OF SCRIPT STARTS HERE ##
#####################################

if [[ $DEBUG = true ]] ; then
    # Maximize logging in debug mode
    echo "DEBUG MODE ON. SETTING OUTPUT TO MAX VERBOSITY."
    sleep 1
    set -xv
fi

USER=""
FILENAME=""
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --help|-h)
            usage
            ;;
        --user|-u)
            # Set user to the name provided after this flag.
            shift
            USER=$1
            ;;
        --file|-f|--filename)
            # Set output file to the name provided after this flag.
            # This is optional: will write to stdout by default.
            shift
            FILENAME=$1
            ;;
        --debug|-db)
            # Turns debugging on
            DEBUG=true
            # Maximize logging in debug mode
            echo "DEBUG MODE ON. SETTING OUTPUT TO MAX VERBOSITY."
            sleep 1
            set -xv
            ;;
        --long|-l)
            # Gets full info on changes
            LONG=true
            ;;
        --report|-r)
            # Write a report
            LONG=true
            FILENAME=$REPORTS_DIR/$(date -I).report
            ;;
        *)
            # Unknown option...
            printf "Unknown Option: \"%s\"\n" "$key"
            ;;
    esac
    shift
done

if [[ -z "$USER" ]] ; then
    echo "Must provide a user. Cannot continue."
    exit 1
else
    main "$USER" "$FILENAME" # DEBUG
fi
