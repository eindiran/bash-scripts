#!/bin/bash
# currenttime
# Print the current time [default = converted to the 12-hour clock.]
# Author: <eindiran@promptu.com>
# Usage:  currenttime [--loc LOC] [--date] [--dow] [--24]
#         currenttime --help || currenttime -h
#
# Args:   none: Return the local time
#         --loc || -l <LOCATION>: Return the time in the specified location
#         <LOCATION> may be any of the following: {OZ, MP, CH, NY, AM, LO, TO}
#         --date || -d: Append the current date to the printed message
#         --24: Use 24-hour time
#         --dow: Append the current day of the week to the printed message
#         --help || -h: Print this message and exit

# Initialize variables to hold flag values
LOCATION=''
TWENTYFOUR=false
DATE=false
DOW=false

# Read the flags/arguments to the script
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --help|-h)
            # Print usage info when a help flag is used
            printf "\nUsage:\tcurrenttime [--oz]\n\tcurrenttime --help || currenttime -h\n\n"
            printf "Args:\tnone: Return the local time\n"
            printf "\t--loc || -l <LOCATION>: Return the time in the specified location\n"
            printf "\n\t<LOCATION> may be any of the following:\n"
            printf "\t{OZ, BR, SY, LA, SF, MP, SL, CH, NY, DC,"
            printf "\n\t AM, LO, TO, KL, NO, IS, BJ, HK, MO, PR,"
            printf "\n\t PA, BE}\n"
            printf "\n\tFor more information, use the --timezones or -tz flags\n"
            printf "\t--date || -d: Append the current date to the printed message\n"
            printf "\t--24: Use 24-hour time\n"
            printf "\t--dow: Append the current day of the week to the printed message\n"
            printf "\t--help || -h: Print this message and exit\n\n"
            exit 0
            ;;
        --timezones|-tz)
            # Print timezone info when the timezone/tz flag is used
            printf "currenttime -- Available Timezones\n"
            printf "=================================\nThe timezones are as follows:\n"
            printf "\tOZ:Queensland, BR:Brisbane, SY:Sydney, LA:LA, SF:San Francisco\n"
            printf "\tMP:Menlo Park, SL: Salt Lake City, CH:Chicago, NY:New York, DC:Washington DC\n"
            printf "\tAM:Amsterdam, LO:London, TO:Tokyo, KL:Kuala Lumpur, NO:Novokuznetsk, IS:Istanbul\n"
            printf "\tBJ:Beijing, HK:Hong Kong, MO:Moscow, PR:Prague, PA:Paris, BE:Berlin\n\n"
            exit 0
            ;;
        --24)
            # Set TWENTYFOUR to true if the --24 flag is found
            TWENTYFOUR=true
            ;;
        --loc|-l)
            # Set location argument to the two letter code given immediately after
            # The current set of codes:
            # {OZ:Queensland, BR:Brisbane, SY:Sydney, LA:LA, SF:San Francisco, MP:Menlo Park,
            #  SL: Salt Lake City, CH:Chicago, NY:New York, DC:Washington DC, AM:Amsterdam, LO:London,
            #  TO:Tokyo, KL:Kuala Lumpur, NO:Novokuznetsk, IS:Istanbul, BJ:Beijing, HK:Hong Kong, MO:Moscow,
            #  PR:Prague, PA:Paris, BE:Berlin}
            shift
            LOCATION="$1"
            ;;
        --date|-d)
            # Set DATE to true if either the --date or the -d flags are found
            DATE=true
            ;;
        --dow)
            # Set DOW to true if the --dow flag is found
            DOW=true
            ;;
        *)
            # Unkown option
            printf "Unknown Option: \"%s\"\n" "$key"
            ;;
    esac
    shift
done

C_DATE_DOW=''
if [ "$LOCATION" = "" ] ; then # If location was not given, get local time
    C_TIME=$(date)
    if [ "$DATE" = true ] ; then
        C_DATE=$(date -I)
        C_DATE_DOW="$C_DATE\t"
    fi
    if [ "$DOW" = true ] ; then
        C_DOW=$(date | awk {'print $1'})
        C_DATE_DOW="$C_DATE_DOW$C_DOW"
    fi
else
    TZ_string=''
    case $LOCATION in
        OZ)
            TZ_string="TZ=Australia/Queensland"
            ;;
        BR)
            TZ_string="TZ=Australia/Brisbane"
            ;;
        SY)
            TZ_string="TZ=Australia/Sydney"
            ;;
        LA)
            TZ_string="TZ=America/Los_Angeles"
            ;;
        SF)
            TZ_string="TZ=America/Los_Angeles"
            ;;
        MP)
            TZ_string="TZ=America/Los_Angeles"
            ;;
        SL) # Salt Lake City
            TZ_string="TZ=Navajo"
            ;;
        DE)
            TZ_string="TZ=America/Denver"
            ;;
        CH)
            TZ_string="TZ=America/Chicago"
            ;;
        NY)
            TZ_string="TZ=America/New_York"
            ;;
        DC)
            TZ_string="TZ=America/New_York"
            ;;
        AM)
            TZ_string="TZ=Europe/Amsterdam"
            ;;
        LO)
            TZ_string="TZ=Europe/London"
            ;;
        TO)
            TZ_string="TZ=Asia/Tokyo"
            ;;
        KL)
            TZ_string="TZ=Asia/Kuala_Lumpur"
            ;;
        NO)
            TZ_string="TZ=Asia/Novokuznetsk"
            ;;
        IS)
            TZ_string="TZ=Asia/Istanbul"
            ;;
        BJ)
            TZ_string="TZ=PRC"
            ;;
        HK)
            TZ_string="TZ=Hongkong"
            ;;
        MO)
            TZ_string="TZ=Europe/Moscow"
            ;;
        PR)
            TZ_string="TZ=Europe/Prague"
            ;;
        PA)
            TZ_string="TZ=Europe/Paris"
            ;;
        BE)
            TZ_string="TZ=Europe/Berlin"
            ;;
        *)
            printf "Unknown Location: \"%s\"\n" "$LOCATION"
            exit 1
            ;;
    esac
    C_TIME=$(env $TZ_string date)
            if [ "$DATE" = true ] ; then
                C_DATE=$(env $TZ_string date -I)
                C_DATE_DOW="$C_DATE\t"
            fi
            if [ "$DOW" = true ] ; then
                C_DOW=$(env $TZ_string date | awk {'print $1'})
                C_DATE_DOW="$C_DATE_DOW$C_DOW"
            fi
fi

# Format the time and date in a pleasing way, using one of two ugly one-liners
if [ $TWENTYFOUR = true ] ; then
    echo $C_TIME | awk {'printf "%s\t", $4; print "'$C_DATE_DOW'"'}
else
    echo $C_TIME | awk {'print $4'} | awk -F':' {'if($1 > 12) {printf "%s:%s:%s PM\t", $1-12, $2, $3} else if($1 == 12) {printf "12:%s:%s PM\t", $2, $3} else {printf "%s:%s:%s AM\t", $1, $2, $3}; print "'$C_DATE_DOW'"'}
fi
