## up -- cd up the directory structure without having to type ../ a billion times
## Author -- Elliott Indiran
## Feb 26, 2016

## IMPORTANT: For this script to work, it must be sourced to the shell, otherwise it will execute in a subshell and when you exit the subshell you wont have moved anywhere!
## Either add "alias up='source up'" to your .bashrc or run the command as . up [...] or source up [...]

usage () {
    echo -e "\nUsage: up [ -h || I || -m || -r || -b]"
    echo -ne "\nMove up I directories. Equivalent "
    echo -ne "to \"cd I*(../)\". Running the bare "
    echo -ne "command(\"up\") is equivalent to \"up 1\""
    echo -e ", in turn equivalent to \"cd ../\"."
    echo -e "\nOptional arguments:"
    echo -e "\t-h\t\tShow this message and exit."
    echo -ne "\n\t I\t\tNumber of directories to climb. "
    echo -e "Must be whole number." 
    ## Originally I had to be <= num dir between current dir and / 
    ## but bash handles this w/ no difficulties"
    echo -e "\n\t-m\t\tGo to the current user's home directory. Equivalent to 'cd'"
    echo -e "\n\t-r\t\tGo to the root directory. Equivalent to 'cd /'"
    echo -e "\n\t-b\t\tGo back to previous directory. Equivalent to 'cd -'"
    echo -e "\t\t\tRelies on the builtin shell variable \$OLDPWD"
    echo
}

NUMBER_REGEX='^[0-9]+$'
## regex to determine if a param is a positive int
ROOT_PATH='/'
## the canonical path to root ;)
JUMP_PATH="" 
## var for holding the path while it is being built

if [[ "$#" -eq 1 ]] ; then
    if [[ "$1" =~ $NUMBER_REGEX ]] ; then
    	JUMPS=$1
    	for (( i=1 ; i <= $JUMPS ; i++ ))
    	    do
    	    	JUMP_PATH=$JUMP_PATH/..
    	    done
    	JUMP_PATH=$(echo $JUMP_PATH | sed 's/^\///')
    	cd $JUMP_PATH
    else
    	case $1 in

    		-h)
    		usage
    		;;

    		-m)
    		cd
    		;;

    		-r)
    		cd $ROOT_PATH
    		;;

    		-b)
    		cd $OLDPWD
    		;;

    		*)
    		usage
    		;;

    	esac
    fi
elif [[ "$#" -eq 0 ]] ; then
    JUMP_PATH=..
    cd $JUMP_PATH
else
    usage
fi
